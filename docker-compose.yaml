version: "3.8"
services:
  resource-service:
    build: ./resource-service
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=jdbc:postgresql://resource-service-database:5432/${RESOURCE_DB_NAME}
      - DATABASE_USER=${RESOURCE_DB_USER}
      - DATABASE_PASSWORD=${RESOURCE_DB_PASSWORD}
      - EUREKA_URL=${SERVICE_DISCOVERY_URL}
      - MINIO_ACCESS_KEY=${STORAGE_ACCESS_KEY}
      - MINIO_SECRET_KEY=${STORAGE_SECRET_KEY}
      - BROKER_USERNAME=${MSG_BROKER_USERNAME}
      - BROKER_PASSWORD=${MSG_BROKER_PASSWORD}
      - BROKER_EXCHANGE=${MSG_BROKER_EXCHANGE}
      - BROKER_ROTING_KEY=${MSG_BROKER_ROTING_KEY}
    restart: always
    depends_on:
      - service-discovery
      - resource-service-database
      - minio-service
      - message-broker

  song-service:
    build: ./song-service
    expose:
      - "8080"
    environment:
      - DATABASE_URL=jdbc:postgresql://song-service-database:5432/${SONG_DB_NAME}
      - DATABASE_USER=${SONG_DB_USER}
      - DATABASE_PASSWORD=${SONG_DB_PASSWORD}
      - EUREKA_URL=${SERVICE_DISCOVERY_URL}
    restart: always
#    deploy:
#      mode: replicated
#      replicas: 3
    depends_on:
      - service-discovery
      - song-service-database

  resource-processor:
    build: ./resource-processor
    expose:
      - "8080"
    environment:
      - EUREKA_URL=${SERVICE_DISCOVERY_URL}
      - BROKER_USERNAME=${MSG_BROKER_USERNAME}
      - BROKER_PASSWORD=${MSG_BROKER_PASSWORD}
      - BROKER_QUEUE=${MSG_BROKER_QUEUE}
      - BROKER_EXCHANGE=${MSG_BROKER_EXCHANGE}
      - BROKER_ROTING_KEY=${MSG_BROKER_ROTING_KEY}
    restart: always
#    deploy:
#      mode: replicated
#      replicas: 3
    depends_on:
      - resource-service
      - song-service
      - service-discovery
      - message-broker

  service-discovery:
    build: ./service-discovery
    ports:
      - "8761:8761"
    restart: always

  resource-service-database:
    image: postgres:16.1-bullseye
    ports:
      - "54321:5432"
    volumes:
      - resource-service-database:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${RESOURCE_DB_NAME}
      - POSTGRES_USER=${RESOURCE_DB_USER}
      - POSTGRES_PASSWORD=${RESOURCE_DB_PASSWORD}
    restart: always

  song-service-database:
    image: postgres:16.1-bullseye
    ports:
      - "54322:5432"
    volumes:
      - song-service-database:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${SONG_DB_NAME}
      - POSTGRES_USER=${SONG_DB_USER}
      - POSTGRES_PASSWORD=${SONG_DB_PASSWORD}
    restart: always

  minio-service:
    image: minio/minio:RELEASE.2024-08-29T01-40-52Z.fips
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-service-storage:/data
    environment:
      - MINIO_ROOT_USER=${STORAGE_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${STORAGE_SECRET_KEY}
    command: server /data --console-address ":9001"
    restart: always

  message-broker:
    image: rabbitmq:3.12.14-management
    ports:
      - "15672:15672"
    volumes:
      - message-broker-volume:/var/lib/rabbitmq
    restart: always

volumes:
  resource-service-database:
  song-service-database:
  minio-service-storage:
  message-broker-volume: